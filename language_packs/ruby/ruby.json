{
	"tokenPostfix": ".ruby",
	"keywords": [
		"__LINE__",
		"__ENCODING__",
		"__FILE__",
		"BEGIN",
		"END",
		"alias",
		"and",
		"begin",
		"break",
		"case",
		"class",
		"def",
		"defined?",
		"do",
		"else",
		"elsif",
		"end",
		"ensure",
		"for",
		"false",
		"if",
		"in",
		"module",
		"next",
		"nil",
		"not",
		"or",
		"redo",
		"rescue",
		"retry",
		"return",
		"self",
		"super",
		"then",
		"true",
		"undef",
		"unless",
		"until",
		"when",
		"while",
		"yield"
	],
	"keywordops": ["::", "..", "...", "?", ":", "=>"],
	"builtins": [
		"require",
		"public",
		"private",
		"include",
		"extend",
		"attr_reader",
		"protected",
		"private_class_method",
		"protected_class_method",
		"new"
	],
	"declarations": [
		"module",
		"class",
		"def",
		"case",
		"do",
		"begin",
		"for",
		"if",
		"while",
		"until",
		"unless"
	],
	"linedecls": ["def", "case", "do", "begin", "for", "if", "while", "until", "unless"],
	"operators": [
		"^",
		"&",
		"|",
		"<=>",
		"==",
		"===",
		"!~",
		"=~",
		">",
		">=",
		"<",
		"<=",
		"<<",
		">>",
		"+",
		"-",
		"*",
		"/",
		"%",
		"**",
		"~",
		"+@",
		"-@",
		"[]",
		"[]=",
		"`",
		"+=",
		"-=",
		"*=",
		"**=",
		"/=",
		"^=",
		"%=",
		"<<=",
		">>=",
		"&=",
		"&&=",
		"||=",
		"|="
	],
	"brackets": [
		{
			"open": "(",
			"close": ")",
			"token": "delimiter.parenthesis"
		},
		{
			"open": "{",
			"close": "}",
			"token": "delimiter.curly"
		},
		{
			"open": "[",
			"close": "]",
			"token": "delimiter.square"
		}
	],
	"symbols": {},
	"escape": {},
	"escapes": {},
	"decpart": {},
	"decimal": {},
	"delim": {},
	"heredelim": {},
	"regexpctl": {},
	"regexpesc": {},
	"tokenizer": {
		"root": [
			[
				{},
				[
					"white",
					{
						"cases": {
							"for|until|while": {
								"token": "keyword.$2",
								"next": "@dodecl.$2"
							},
							"@declarations": {
								"token": "keyword.$2",
								"next": "@root.$2"
							},
							"end": {
								"token": "keyword.$S2",
								"next": "@pop"
							},
							"@keywords": "keyword",
							"@builtins": "predefined",
							"@default": "identifier"
						}
					}
				]
			],
			[
				{},
				{
					"cases": {
						"if|unless|while|until": {
							"token": "keyword.$0x",
							"next": "@modifier.$0x"
						},
						"for": {
							"token": "keyword.$2",
							"next": "@dodecl.$2"
						},
						"@linedecls": {
							"token": "keyword.$0",
							"next": "@root.$0"
						},
						"end": {
							"token": "keyword.$S2",
							"next": "@pop"
						},
						"@keywords": "keyword",
						"@builtins": "predefined",
						"@default": "identifier"
					}
				}
			],
			[{}, "constructor.identifier"],
			[{}, "global.constant"],
			[{}, "namespace.instance.identifier"],
			[{}, "namespace.class.identifier"],
			[
				{},
				{
					"token": "string.heredoc.delimiter",
					"next": "@heredoc.$1"
				}
			],
			[
				{},
				{
					"token": "string.heredoc.delimiter",
					"next": "@heredoc.$1"
				}
			],
			[
				{},
				{
					"token": "string.heredoc.delimiter",
					"next": "@heredoc.$1"
				}
			],
			{
				"include": "@whitespace"
			},
			[
				{},
				{
					"token": "string.d.delim",
					"next": "@dstring.d.\""
				}
			],
			[
				{},
				{
					"token": "string.sq.delim",
					"next": "@sstring.sq"
				}
			],
			[
				{},
				{
					"token": "@rematch",
					"next": "pstring"
				}
			],
			[
				{},
				{
					"token": "string.x.delim",
					"next": "@dstring.x.`"
				}
			],
			[{}, "string.s"],
			[
				{},
				{
					"token": "string.s.delim",
					"next": "@dstring.s.\""
				}
			],
			[
				{},
				{
					"token": "string.s.delim",
					"next": "@sstring.s"
				}
			],
			[
				{},
				{
					"token": "regexp.delim",
					"next": "@regexp"
				}
			],
			[{}, "@brackets"],
			[
				{},
				{
					"cases": {
						"@keywordops": "keyword",
						"@operators": "operator",
						"@default": ""
					}
				}
			],
			[{}, "delimiter"],
			[{}, "number.hex"],
			[{}, "number.octal"],
			[{}, "number.binary"],
			[{}, "number"],
			[
				{},
				{
					"cases": {
						"$1": "number.float",
						"@default": "number"
					}
				}
			]
		],
		"dodecl": [
			[
				{},
				{
					"token": "",
					"switchTo": "@root.$S2"
				}
			],
			[
				{},
				{
					"cases": {
						"end": {
							"token": "keyword.$S2",
							"next": "@pop"
						},
						"do": {
							"token": "keyword",
							"switchTo": "@root.$S2"
						},
						"@linedecls": {
							"token": "@rematch",
							"switchTo": "@root.$S2"
						},
						"@keywords": "keyword",
						"@builtins": "predefined",
						"@default": "identifier"
					}
				}
			],
			{
				"include": "@root"
			}
		],
		"modifier": [
			[{}, "", "@pop"],
			[
				{},
				{
					"cases": {
						"end": {
							"token": "keyword.$S2",
							"next": "@pop"
						},
						"then|else|elsif|do": {
							"token": "keyword",
							"switchTo": "@root.$S2"
						},
						"@linedecls": {
							"token": "@rematch",
							"switchTo": "@root.$S2"
						},
						"@keywords": "keyword",
						"@builtins": "predefined",
						"@default": "identifier"
					}
				}
			],
			{
				"include": "@root"
			}
		],
		"sstring": [
			[{}, "string.$S2"],
			[{}, "string.$S2.escape"],
			[{}, "string.$S2.invalid"],
			[
				{},
				{
					"token": "string.$S2.delim",
					"next": "@pop"
				}
			]
		],
		"dstring": [
			[{}, "string.$S2"],
			[{}, "string.$S2.escape", "@interpolated"],
			[{}, "string.$S2.escape"],
			[{}, "string.$S2.escape"],
			[{}, "string.$S2.escape.invalid"],
			[
				{},
				{
					"cases": {
						"$#==$S3": {
							"token": "string.$S2.delim",
							"next": "@pop"
						},
						"@default": "string.$S2"
					}
				}
			]
		],
		"heredoc": [
			[
				{},
				{
					"cases": {
						"$2==$S2": [
							"string.heredoc",
							{
								"token": "string.heredoc.delimiter",
								"next": "@pop"
							}
						],
						"@default": ["string.heredoc", "string.heredoc"]
					}
				}
			],
			[{}, "string.heredoc"]
		],
		"interpolated": [
			[{}, "global.constant", "@pop"],
			[{}, "namespace.class.identifier", "@pop"],
			[{}, "namespace.instance.identifier", "@pop"],
			[
				{},
				{
					"token": "string.escape.curly",
					"switchTo": "@interpolated_compound"
				}
			],
			["", "", "@pop"]
		],
		"interpolated_compound": [
			[
				{},
				{
					"token": "string.escape.curly",
					"next": "@pop"
				}
			],
			{
				"include": "@root"
			}
		],
		"pregexp": [
			{
				"include": "@whitespace"
			},
			[
				{},
				{
					"cases": {
						"$#==$S3": {
							"token": "regexp.delim",
							"next": "@pop"
						},
						"$#==$S2": {
							"token": "regexp.delim",
							"next": "@push"
						},
						"~[)}\\]]": "@brackets.regexp.escape.control",
						"~@regexpctl": "regexp.escape.control",
						"@default": "regexp"
					}
				}
			],
			{
				"include": "@regexcontrol"
			}
		],
		"regexp": [
			{
				"include": "@regexcontrol"
			},
			[{}, "regexp"],
			[
				"/[ixmp]*",
				{
					"token": "regexp.delim"
				},
				"@pop"
			]
		],
		"regexcontrol": [
			[
				{},
				[
					"@brackets.regexp.escape.control",
					"regexp.escape.control",
					"@brackets.regexp.escape.control"
				]
			],
			[
				{},
				[
					"@brackets.regexp.escape.control",
					{
						"token": "regexp.escape.control",
						"next": "@regexrange"
					}
				]
			],
			[{}, ["@brackets.regexp.escape.control", "regexp.escape.control"]],
			[
				{},
				{
					"token": "regexp.escape.control",
					"next": "@regexpcomment"
				}
			],
			[{}, "@brackets.regexp.escape.control"],
			[{}, "regexp.escape.control"],
			[{}, "regexp.escape"],
			[{}, "regexp.escape"],
			[{}, "regexp.invalid"],
			[{}, "regexp.escape", "@interpolated"]
		],
		"regexrange": [
			[{}, "regexp.escape.control"],
			[{}, "regexp.invalid"],
			[{}, "regexp.escape"],
			[{}, "regexp.escape"],
			[{}, "regexp"],
			[{}, "@brackets.regexp.escape.control", "@pop"]
		],
		"regexpcomment": [
			[{}, "comment"],
			[
				{},
				{
					"token": "regexp.escape.control",
					"next": "@pop"
				}
			]
		],
		"pstring": [
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qstring.$1.(.)"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qstring.$1.[.]"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qstring.$1.{.}"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qstring.$1.<.>"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qstring.$1.$2.$2"
				}
			],
			[
				{},
				{
					"token": "regexp.delim",
					"switchTo": "@pregexp.(.)"
				}
			],
			[
				{},
				{
					"token": "regexp.delim",
					"switchTo": "@pregexp.[.]"
				}
			],
			[
				{},
				{
					"token": "regexp.delim",
					"switchTo": "@pregexp.{.}"
				}
			],
			[
				{},
				{
					"token": "regexp.delim",
					"switchTo": "@pregexp.<.>"
				}
			],
			[
				{},
				{
					"token": "regexp.delim",
					"switchTo": "@pregexp.$1.$1"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qqstring.$1.(.)"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qqstring.$1.[.]"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qqstring.$1.{.}"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qqstring.$1.<.>"
				}
			],
			[
				{},
				{
					"token": "string.$1.delim",
					"switchTo": "@qqstring.$1.$2.$2"
				}
			],
			[
				{},
				{
					"token": "invalid",
					"next": "@pop"
				}
			],
			[
				{},
				{
					"token": "invalid",
					"next": "@pop"
				}
			]
		],
		"qstring": [
			[{}, "string.$S2.escape"],
			[{}, "string.$S2.escape"],
			[
				{},
				{
					"cases": {
						"$#==$S4": {
							"token": "string.$S2.delim",
							"next": "@pop"
						},
						"$#==$S3": {
							"token": "string.$S2.delim",
							"next": "@push"
						},
						"@default": "string.$S2"
					}
				}
			]
		],
		"qqstring": [
			[{}, "string.$S2.escape", "@interpolated"],
			{
				"include": "@qstring"
			}
		],
		"whitespace": [
			[{}, ""],
			[{}, "comment", "@comment"],
			[{}, "comment"]
		],
		"comment": [
			[{}, "comment"],
			[{}, "comment.invalid"],
			[{}, "comment", "@pop"],
			[{}, "comment"]
		]
	}
}
